D‚Äôaccord ‚Äî on y va au pas √† pas pour faire marcher le rendu ["string","null"]. Tu dis ‚ÄúJack ne marche tjr pas‚Äù ‚Äî j‚Äôassume que tu veux dire Jackson / Swagger / SpringDoc : r√©sum√© ‚Äî il reste un point bloquant c√¥t√© g√©n√©ration du sch√©ma OpenAPI. Voici une solution robuste et pr√™te √† coller dans ton projet, plus les v√©rifs √† faire.

‚∏ª

‚úÖ Solution fiable (PropertyCustomizer + oneOf)

Ajoute ce composant : il force, pour chaque propri√©t√© string annot√©e nullable, la g√©n√©ration oneOf: [ { type: "string" }, { type: "null" } ]. √áa contourne les diff√©rences de versions SpringDoc.

package eu.olkypay.business_registry.config;

import io.swagger.v3.oas.models.media.Schema;
import org.springdoc.core.customizers.PropertyCustomizer;
import org.springframework.stereotype.Component;

import java.lang.reflect.Type;
import java.util.Arrays;

@Component
public class NullablePropertyCustomizer implements PropertyCustomizer {

    @Override
    public Schema<?> customize(Schema<?> property, Type type) {
        if (property == null) return null;

        // Si la propri√©t√© est de type string et explicitement nullable, on transforme en oneOf [string, null]
        if ("string".equals(property.getType()) && Boolean.TRUE.equals(property.getNullable())) {
            Schema<?> stringSchema = new Schema<>().type("string");
            Schema<?> nullSchema = new Schema<>().type("null");
            property.setOneOf(Arrays.asList(stringSchema, nullSchema));
            // clear simple type/nullable to avoid conflit d'affichage
            property.setType(null);
            property.setNullable(null);
        }
        return property;
    }
}

Colle ce fichier, rebuild et restart.

‚∏ª

üîé V√©rifications √† faire (ordre important)
	1.	Properties

springdoc.api-docs.version=OPENAPI_3_1
springdoc.model-converters.nullable-properties=true

(tu peux laisser model-converters.nullable-properties=true m√™me si on force le oneOf)

	2.	V√©rifier d√©pendances (pas de m√©lange incompatible)
Dans ton projet, ex√©cute :

mvn dependency:tree | grep springdoc -n
mvn dependency:tree | grep spring-boot -n

Assure-toi d‚Äôavoir UNE seule version de springdoc-openapi-starter-webmvc-ui compatible avec ton Spring Boot. Pas de restes 3.0.0-M1 si tu es sur Boot 3.3.x/3.5.x.

	3.	Nettoyer et rebuild

mvn clean package -DskipTests

Red√©marre (mvn spring-boot:run ou via IntelliJ Run).

	4.	Vider le cache du navigateur (Swagger UI met parfois en cache). Ouvre /v3/api-docs (ou ton path si tu l‚Äôas customis√©) :
http://localhost:8080/v3/api-docs
Cherche la d√©finition du zipCode / address. Tu dois voir :

"zipCode": {
  "oneOf": [
    { "type": "string" },
    { "type": "null" }
  ],
  "example": "75015"
}


	5.	Si tu vois toujours type: "string" :
	‚Ä¢	Poste le fragment JSON correspondant (la partie zipCode dans /v3/api-docs).
	‚Ä¢	V√©rifie qu‚Äôil n‚Äôy a pas un autre PropertyCustomizer qui √©crase.
	‚Ä¢	V√©rifie qu‚Äôil n‚Äôy a pas d‚Äôautre d√©pendance springdoc en transitif (par ex. springdoc-openapi-starter-common en double version).

‚∏ª

Remarques importantes / pourquoi on fait oneOf
	‚Ä¢	OpenAPI 3.1 permet type: ["string","null"]. SpringDoc/Swagger UI peuvent cependant pr√©f√©rer oneOf ou nullable:true selon versions.
	‚Ä¢	property.setNullable(true) peut suffire sur certaines versions, mais pas syst√©matiquement (bugs/versions). oneOf est la mani√®re la plus portable pour que l‚ÄôUI et les clients comprennent ‚Äústring ou null‚Äù.
	‚Ä¢	On vide type et nullable ensuite pour √©viter un rendu ambigu.

‚∏ª

Exemple minimal (DTO + contr√¥leur)

Tu peux v√©rifier avec ce mini-exemple :

// AddressDTO
public class AddressDTO {
    @Schema(description = "Code postal", nullable = true, example = "75015")
    private String zipCode;
    // getters/setters
}

// Controller
@RestController
public class TestController {
    @GetMapping("/test/address")
    public AddressDTO test() {
        AddressDTO d = new AddressDTO();
        d.setZipCode("75015");
        return d;
    }
}

Puis visite http://localhost:8080/v3/api-docs et cherche AddressDTO ‚Üí zipCode.

‚∏ª

Si √ßa marche toujours pas ‚Äî que m‚Äôenvoyer

Colle ici (copier-coller) :
	1.	Le fragment /v3/api-docs pour Address / zipCode (juste 20‚Äì50 lignes autour)
	2.	Le dependency:tree output pour springdoc et spring-boot (les commandes ci-dessus)
	3.	La version de Spring Boot dans ton pom.xml (parent).

Avec ces 3 √©l√©ments je te fournis le patch exact.

‚∏ª

Tu veux que je te g√©n√®re ce NullablePropertyCustomizer complet (je l‚Äôai d√©j√† fourni) ou tu pr√©f√®res que je regarde directement ton /v3/api-docs fragment pour corriger au plus juste ?